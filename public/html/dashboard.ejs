<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Arial:wght@400;700&display=swap');

      body {
          background-color: white;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          font-family: Arial, sans-serif;
          background-image: url('images/background.webp');
          background-size: cover;
          background-repeat: no-repeat;
      }

      .login-container {
          background: rgba(38, 33, 33, 0.6);
          padding: 25px 25px 35px 25px;
          border-radius: 10px;
          box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.5);
          text-align: center;
          color: white;
          width: 600px;
          height: auto;
          min-height: 350px;
          animation: containerFadeIn 0.5s ease-out;
          transition: all 0.3s ease;
      }

      .login-container h2 {
          width: 99%;
          margin-left: auto;
          margin-right: auto;
          font-size: 26px;
          margin-bottom: 30px;
          font-weight: bold;
          text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);
      }

      input {
          width: 70%;
          padding: 12px;
          margin: 10px 0;
          border: 2px solid #7ab9d4;
          border-radius: 5px;
          font-size: 16px;
          background-color: #1c6586;
          color: white;
          text-align: left;
          padding-left: 20px;
          transition: all 0.3s ease;
      }

      input:focus {
          transform: scale(1.02);
          box-shadow: 0 0 15px rgba(122, 185, 212, 0.3);
          outline: none;
      }

      input::placeholder {
          color: #7ab9d4;
      }

      .register-link {
          color: #bd4e19;
          font-size: 18px;
          margin-top: 15px;
          font-weight: bold;
          text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);
      }

      .register-link a {
          transition: all 0.3s ease;
      }

      .register-link a:hover {
          color: #ff6b2b !important;
          text-shadow: 1px 1px 5px rgba(0, 0, 0, 0.4);
      }

      button {
          background-color: #02b8ff;
          color: white;
          padding: 10px 0;
          width: calc(72% + 27px);
          border: none;
          border-radius: 5px;
          font-size: 20px;
          cursor: pointer;
          margin-top: 2px;
          font-weight: bold;
          box-shadow: 0px 3px 5px rgba(0, 0, 0, 0.3);
          text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
          border: 2px solid #78c1dc;
          transition: all 0.3s ease;
      }

      button:hover {
          background-color: #00a0e0;
          transform: translateY(-2px);
          box-shadow: 0px 5px 8px rgba(0, 0, 0, 0.4);
      }

      button:active {
          transform: translateY(1px);
      }

      @keyframes containerFadeIn {
          from {
              opacity: 0;
              transform: translateY(-20px);
          }
          to {
              opacity: 1;
              transform: translateY(0);
          }
      }

      .form-success {
          animation: successPulse 0.5s ease-out;
      }

      @keyframes successPulse {
          0% { transform: scale(1); }
          50% { transform: scale(1.02); }
          100% { transform: scale(1); }
      }

      .message {
          position: fixed;
          top: 20px;
          left: 50%;
          transform: translateX(-50%);
          padding: 15px 30px;
          border-radius: 50px;
          color: white;
          font-weight: bold;
          opacity: 0;
          transition: opacity 0.3s ease;
          z-index: 1000;
      }

      .message.success {
          background-color: #02b8ff;
          box-shadow: 0 4px 15px rgba(2, 184, 255, 0.3);
      }

      .message.error {
          background-color: #ff4646;
          box-shadow: 0 4px 15px rgba(255, 70, 70, 0.3);
      }

      .message.show {
          opacity: 1;
      }
    </style>
</head>
<body>
    <div class="login-container">
        <h2>Login with your GloryPs Account</h2>
        <form id="loginForm">
            <input type="text" id="loginGrowID" placeholder="Your Account GrowID" required>
            <input type="password" id="loginPassword" placeholder="Your Account Password" required>
            <button type="submit">Log in</button>
            <p class="register-link">Don't have an account? <a href="register.html" style="color: #bd4e19; text-decoration: none;">Register!</a></p>
        </form>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Load stored GrowID if exists
            if (localStorage.getItem('growId')) {
                document.getElementById('loginGrowID').value = localStorage.getItem('growId');
            }

            // Get the form and input fields
            const loginForm = document.getElementById('loginForm');
            const loginGrowId = document.getElementById('loginGrowID');
            const loginPassword = document.getElementById('loginPassword');

            // Form submission logic
            loginForm.addEventListener('submit', function (event) {
                event.preventDefault();

                const uName = loginGrowId.value;
                const uPass = loginPassword.value;

                // Clear previous messages
                const existingMessage = document.querySelector('.message');
                if (existingMessage) existingMessage.remove();

                const messageDiv = document.createElement('div');
                messageDiv.classList.add('message');

                // Validation checks
                if (!uName || !uPass) {
                    messageDiv.classList.add('error');
                    messageDiv.textContent = 'Username or Password is empty';
                    document.body.appendChild(messageDiv);
                    setTimeout(() => messageDiv.classList.add('show'), 0);
                    return;
                } else if (uName.length < 4 || uPass.length < 4) {
                    messageDiv.classList.add('error');
                    messageDiv.textContent = 'Username or Password must be at least 4 characters long';
                    document.body.appendChild(messageDiv);
                    setTimeout(() => messageDiv.classList.add('show'), 0);
                    return;
                }

                // On success, simulate login (can replace with actual API call)
                localStorage.setItem('growId', uName);
                messageDiv.classList.add('success');
                messageDiv.textContent = 'Login Successful!';
                document.body.appendChild(messageDiv);
                setTimeout(() => messageDiv.classList.add('show'), 0);
                setTimeout(() => messageDiv.classList.remove('show'), 3000);
            });
        });
    </script>
</body>
</html>
